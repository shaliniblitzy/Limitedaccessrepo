# Nginx configuration for Node.js tutorial HTTP server reverse proxy
# This configuration demonstrates reverse proxy concepts for educational purposes
# while maintaining production-ready practices for development and learning environments

# Define the user under which nginx worker processes will run
# The 'nginx' user provides security isolation and follows container best practices
user nginx;

# Set the number of worker processes
# For educational/development use, 1 worker process is sufficient
# In production, this would typically match the number of CPU cores
worker_processes 1;

# Configure error logging
# Log level 'warn' provides sufficient detail for educational debugging
# without overwhelming output during normal operation
error_log /var/log/nginx/error.log warn;

# Specify the file that stores the process ID of the main nginx process
# This enables proper process management and monitoring
pid /var/run/nginx.pid;

# Events block configures connection processing
events {
    # Maximum number of simultaneous connections per worker process
    # 1024 connections is appropriate for educational and light development use
    # This setting balances resource usage with connection handling capacity
    worker_connections 1024;
    
    # Use efficient connection processing method
    # epoll is optimal for Linux systems (default in modern nginx)
    use epoll;
    
    # Accept multiple connections at once
    # Improves performance under load
    multi_accept on;
}

# HTTP block contains all HTTP-related configuration
http {
    # Include MIME type definitions for proper content type handling
    # This ensures correct Content-Type headers for static files
    include /etc/nginx/mime.types;
    
    # Set default MIME type for files without recognized extensions
    default_type application/octet-stream;
    
    # Configure log format for educational debugging and monitoring
    # This format provides comprehensive request information for learning
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    # Configure access logging
    # Logs all requests for educational analysis and debugging
    access_log /var/log/nginx/access.log main;
    
    # Enable efficient file serving
    # sendfile optimizes static file delivery (though not primary focus of this tutorial)
    sendfile on;
    
    # Optimize TCP socket behavior for better performance
    tcp_nopush on;
    tcp_nodelay on;
    
    # Set keep-alive timeout for client connections
    # 65 seconds balances connection reuse with resource management
    keepalive_timeout 65;
    
    # Enable gzip compression to reduce bandwidth usage
    # Beneficial for text-based responses like HTML, JSON, and JavaScript
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/json
        application/javascript
        text/css
        text/html
        text/plain
        text/xml;
    
    # Define upstream backend server group
    # This creates a named backend reference for the Node.js service
    # 'backend' matches the Docker Compose service name for container networking
    upstream backend {
        # Single backend server running the Node.js application
        # The hostname 'backend' is resolved via Docker's internal DNS
        # Port 3000 matches the Node.js server configuration
        server backend:3000;
        
        # Connection management for upstream health
        # These settings ensure reliable communication with the backend service
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # Main server block for HTTP request handling
    server {
        # Listen on port 80 (HTTP)
        # This port is mapped to host port 8080 by Docker Compose
        listen 80;
        
        # Server name configuration
        # The underscore (_) acts as a catch-all for any hostname
        # Appropriate for educational/development environments
        server_name _;
        
        # Configure server-level headers for security and debugging
        # These headers provide basic security and aid in troubleshooting
        add_header X-Proxy-Server nginx;
        add_header X-Proxy-Backend backend;
        
        # Main location block: proxy all requests to the backend
        # This configuration handles all incoming HTTP requests
        location / {
            # Forward all requests to the backend upstream group
            # This is the core reverse proxy functionality
            proxy_pass http://backend;
            
            # Use HTTP/1.1 for upstream connections
            # Enables keep-alive connections for better performance
            proxy_http_version 1.1;
            
            # Preserve original client information in headers
            # These headers ensure the backend receives client details for logging and processing
            
            # Pass through the original Host header
            proxy_set_header Host $host;
            
            # Forward the real client IP address
            # Essential for logging and security analysis
            proxy_set_header X-Real-IP $remote_addr;
            
            # Build the X-Forwarded-For header chain
            # Maintains the full client IP chain through multiple proxies
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Indicate the original protocol (HTTP/HTTPS)
            # Important for applications that need to know the original request protocol
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle WebSocket connections (if needed for future extensions)
            # These headers enable WebSocket proxying for real-time applications
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # Configure proxy timeouts for reliable communication
            # These settings balance responsiveness with connection stability
            
            # Time to wait for backend response
            proxy_read_timeout 60s;
            
            # Time to wait for backend connection
            proxy_connect_timeout 60s;
            
            # Time to wait for request transmission to backend
            proxy_send_timeout 60s;
            
            # Buffer configuration for optimal performance
            # These settings manage memory usage and response handling
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Disable proxy caching for dynamic content
            # Ensures fresh responses from the backend service
            proxy_cache_bypass $http_upgrade;
            proxy_no_cache $http_upgrade;
        }
        
        # Specific location block for the hello endpoint demonstration
        # This shows how to create endpoint-specific proxy configurations
        location = /hello {
            # Forward hello requests to the backend
            proxy_pass http://backend;
            
            # Inherit proxy settings from the main location block
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add endpoint-specific headers for educational purposes
            add_header X-Endpoint-Handler hello;
            add_header X-Proxy-Location exact-match;
            
            # Configure timeouts specific to this endpoint
            proxy_read_timeout 30s;
            proxy_connect_timeout 30s;
        }
        
        # Health check endpoint for monitoring and validation
        # This endpoint allows external monitoring systems to verify proxy health
        location = /health {
            # Simple health check that bypasses the backend
            # Returns 200 OK if nginx is running and able to process requests
            access_log off;
            return 200 "nginx proxy healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Nginx server status endpoint for debugging (development only)
        # Provides nginx server statistics for educational analysis
        location = /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
        
        # Error page handling
        # Custom error pages provide better user experience and hide server details
        
        # Handle 404 errors (Not Found)
        error_page 404 /404.html;
        location = /404.html {
            internal;
            root /usr/share/nginx/html;
        }
        
        # Handle 50x errors (Server Errors)
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            internal;
            root /usr/share/nginx/html;
        }
        
        # Handle 502 Bad Gateway specifically
        # This occurs when the backend service is unavailable
        error_page 502 /502.html;
        location = /502.html {
            internal;
            root /usr/share/nginx/html;
        }
        
        # Security headers for basic protection
        # These headers provide fundamental security for educational/development use
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        
        # Disable server signature for minimal information disclosure
        server_tokens off;
    }
}

# Define connection upgrade mapping for WebSocket support
# This map enables WebSocket proxying for future application extensions
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}